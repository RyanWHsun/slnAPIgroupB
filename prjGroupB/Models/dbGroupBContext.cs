// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace prjGroupB.Models;

public partial class dbGroupBContext : DbContext
{
    public dbGroupBContext(DbContextOptions<dbGroupBContext> options)
        : base(options)
    {
    }

    public virtual DbSet<TAttraction> TAttractions { get; set; }

    public virtual DbSet<TAttractionCategory> TAttractionCategories { get; set; }

    public virtual DbSet<TAttractionComment> TAttractionComments { get; set; }

    public virtual DbSet<TAttractionImage> TAttractionImages { get; set; }

    public virtual DbSet<TAttractionJoinAttractionTag> TAttractionJoinAttractionTags { get; set; }

    public virtual DbSet<TAttractionRecommendation> TAttractionRecommendations { get; set; }

    public virtual DbSet<TAttractionTag> TAttractionTags { get; set; }

    public virtual DbSet<TAttractionTicket> TAttractionTickets { get; set; }

    public virtual DbSet<TAttractionTicketOrder> TAttractionTicketOrders { get; set; }

    public virtual DbSet<TAttractionUserFavorite> TAttractionUserFavorites { get; set; }

    public virtual DbSet<TAttractionView> TAttractionViews { get; set; }

    public virtual DbSet<TAttractionViewLog> TAttractionViewLogs { get; set; }

    public virtual DbSet<TChat> TChats { get; set; }

    public virtual DbSet<TChatRoom> TChatRooms { get; set; }

    public virtual DbSet<TEvent> TEvents { get; set; }

    public virtual DbSet<TEventCategory> TEventCategories { get; set; }

    public virtual DbSet<TEventCategoryMapping> TEventCategoryMappings { get; set; }

    public virtual DbSet<TEventContact> TEventContacts { get; set; }

    public virtual DbSet<TEventFavorite> TEventFavorites { get; set; }

    public virtual DbSet<TEventImage> TEventImages { get; set; }

    public virtual DbSet<TEventLocation> TEventLocations { get; set; }

    public virtual DbSet<TEventLog> TEventLogs { get; set; }

    public virtual DbSet<TEventPayment> TEventPayments { get; set; }

    public virtual DbSet<TEventRegistrationForm> TEventRegistrationForms { get; set; }

    public virtual DbSet<TEventSchedule> TEventSchedules { get; set; }

    public virtual DbSet<TFriend> TFriends { get; set; }

    public virtual DbSet<TMessage> TMessages { get; set; }

    public virtual DbSet<TOrder> TOrders { get; set; }

    public virtual DbSet<TOrderStatus> TOrderStatuses { get; set; }

    public virtual DbSet<TOrderStatusHistory> TOrderStatusHistories { get; set; }

    public virtual DbSet<TOrdersDetail> TOrdersDetails { get; set; }

    public virtual DbSet<TPost> TPosts { get; set; }

    public virtual DbSet<TPostAndTag> TPostAndTags { get; set; }

    public virtual DbSet<TPostCategory> TPostCategories { get; set; }

    public virtual DbSet<TPostComment> TPostComments { get; set; }

    public virtual DbSet<TPostImage> TPostImages { get; set; }

    public virtual DbSet<TPostLike> TPostLikes { get; set; }

    public virtual DbSet<TPostTag> TPostTags { get; set; }

    public virtual DbSet<TProduct> TProducts { get; set; }

    public virtual DbSet<TProductCategory> TProductCategories { get; set; }

    public virtual DbSet<TProductImage> TProductImages { get; set; }

    public virtual DbSet<TProductReview> TProductReviews { get; set; }

    public virtual DbSet<TRank> TRanks { get; set; }

    public virtual DbSet<TShoppingCart> TShoppingCarts { get; set; }

    public virtual DbSet<TShoppingCartItem> TShoppingCartItems { get; set; }

    public virtual DbSet<TUser> TUsers { get; set; }

    public virtual DbSet<TWallet> TWallets { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<TAttraction>(entity =>
        {
            entity.HasKey(e => e.FAttractionId).HasName("PK__tAttract__F9B18832182D39AF");

            entity.ToTable("tAttractions");

            entity.Property(e => e.FAttractionId).HasColumnName("fAttractionId");
            entity.Property(e => e.FAddress).HasColumnName("fAddress");
            entity.Property(e => e.FAttractionName)
                .HasMaxLength(50)
                .HasColumnName("fAttractionName");
            entity.Property(e => e.FCategoryId).HasColumnName("fCategoryId");
            entity.Property(e => e.FClosingTime).HasColumnName("fClosingTime");
            entity.Property(e => e.FCreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("fCreatedDate");
            entity.Property(e => e.FDescription).HasColumnName("fDescription");
            entity.Property(e => e.FLatitude)
                .HasMaxLength(20)
                .HasColumnName("fLatitude");
            entity.Property(e => e.FLongitude)
                .HasMaxLength(20)
                .HasColumnName("fLongitude");
            entity.Property(e => e.FOpeningTime).HasColumnName("fOpeningTime");
            entity.Property(e => e.FPhoneNumber)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("fPhoneNumber");
            entity.Property(e => e.FRegion)
                .HasMaxLength(50)
                .HasColumnName("fRegion");
            entity.Property(e => e.FStatus)
                .HasMaxLength(10)
                .HasColumnName("fStatus");
            entity.Property(e => e.FTrafficInformation).HasColumnName("fTrafficInformation");
            entity.Property(e => e.FUpdatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("fUpdatedDate");
            entity.Property(e => e.FWebsiteUrl).HasColumnName("fWebsiteURL");

            entity.HasOne(d => d.FCategory).WithMany(p => p.TAttractions)
                .HasForeignKey(d => d.FCategoryId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK__tAttracti__fCate__08B54D69");
        });

        modelBuilder.Entity<TAttractionCategory>(entity =>
        {
            entity.HasKey(e => e.FAttractionCategoryId).HasName("PK__tAttract__FD5366824DF5E2C4");

            entity.ToTable("tAttractionCategories");

            entity.Property(e => e.FAttractionCategoryId).HasColumnName("fAttractionCategoryId");
            entity.Property(e => e.FAttractionCategoryName)
                .HasMaxLength(10)
                .HasColumnName("fAttractionCategoryName");
            entity.Property(e => e.FCreateDate)
                .HasColumnType("datetime")
                .HasColumnName("fCreateDate");
            entity.Property(e => e.FDescription).HasColumnName("fDescription");
        });

        modelBuilder.Entity<TAttractionComment>(entity =>
        {
            entity.HasKey(e => e.FCommentId).HasName("PK__tAttract__F4718CE256C24957");

            entity.ToTable("tAttractionComments");

            entity.Property(e => e.FCommentId).HasColumnName("fCommentId");
            entity.Property(e => e.FAttractionId).HasColumnName("fAttractionId");
            entity.Property(e => e.FComment).HasColumnName("fComment");
            entity.Property(e => e.FCreatedDate)
                .HasColumnType("datetime")
                .HasColumnName("fCreatedDate");
            entity.Property(e => e.FRating).HasColumnName("fRating");
            entity.Property(e => e.FUserId).HasColumnName("fUserId");

            entity.HasOne(d => d.FAttraction).WithMany(p => p.TAttractionComments)
                .HasForeignKey(d => d.FAttractionId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK__tAttracti__fAttr__03F0984C");

            entity.HasOne(d => d.FUser).WithMany(p => p.TAttractionComments)
                .HasForeignKey(d => d.FUserId)
                .HasConstraintName("FK__tAttracti__fUser__04E4BC85");
        });

        modelBuilder.Entity<TAttractionImage>(entity =>
        {
            entity.HasKey(e => e.FAttractionImageId).HasName("PK__tAttract__DD99A010444533BD");

            entity.ToTable("tAttractionImages");

            entity.Property(e => e.FAttractionImageId).HasColumnName("fAttractionImageId");
            entity.Property(e => e.FAttractionId).HasColumnName("fAttractionId");
            entity.Property(e => e.FImage)
                .HasColumnType("image")
                .HasColumnName("fImage");

            entity.HasOne(d => d.FAttraction).WithMany(p => p.TAttractionImages)
                .HasForeignKey(d => d.FAttractionId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK__tAttracti__fAttr__05D8E0BE");
        });

        modelBuilder.Entity<TAttractionJoinAttractionTag>(entity =>
        {
            entity.HasKey(e => e.FAttractionJoinAttractionTagId);

            entity.ToTable("tAttractionJoinAttractionTag");

            entity.Property(e => e.FAttractionJoinAttractionTagId).HasColumnName("fAttractionJoinAttractionTagId");
            entity.Property(e => e.FAttractionId).HasColumnName("fAttractionId");
            entity.Property(e => e.FTagId).HasColumnName("fTagId");

            entity.HasOne(d => d.FAttraction).WithMany(p => p.TAttractionJoinAttractionTags)
                .HasForeignKey(d => d.FAttractionId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_tAttractionJoinAttractionTag_tAttractions");

            entity.HasOne(d => d.FTag).WithMany(p => p.TAttractionJoinAttractionTags)
                .HasForeignKey(d => d.FTagId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_tAttractionJoinAttractionTag_tAttractionTags");
        });

        modelBuilder.Entity<TAttractionRecommendation>(entity =>
        {
            entity.HasKey(e => e.FAttractionRecommendationId).HasName("PK__tAttract__DC8DBD1719515096");

            entity.ToTable("tAttractionRecommendations");

            entity.Property(e => e.FAttractionRecommendationId).HasColumnName("fAttractionRecommendationId");
            entity.Property(e => e.FAttractionId).HasColumnName("fAttractionId");
            entity.Property(e => e.FCreatedDate)
                .HasColumnType("datetime")
                .HasColumnName("fCreatedDate");
            entity.Property(e => e.FReason).HasColumnName("fReason");
            entity.Property(e => e.FRecommendationId).HasColumnName("fRecommendationId");

            entity.HasOne(d => d.FAttraction).WithMany(p => p.TAttractionRecommendationFAttractions)
                .HasForeignKey(d => d.FAttractionId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK__tAttracti__fAttr__06CD04F7");

            entity.HasOne(d => d.FRecommendation).WithMany(p => p.TAttractionRecommendationFRecommendations)
                .HasForeignKey(d => d.FRecommendationId)
                .HasConstraintName("FK__tAttracti__fReco__07C12930");
        });

        modelBuilder.Entity<TAttractionTag>(entity =>
        {
            entity.HasKey(e => e.FTagId).HasName("PK__tAttract__036309757EA64873");

            entity.ToTable("tAttractionTags");

            entity.Property(e => e.FTagId).HasColumnName("fTagId");
            entity.Property(e => e.FCreatedDate)
                .HasColumnType("datetime")
                .HasColumnName("fCreatedDate");
            entity.Property(e => e.FTagName)
                .HasMaxLength(10)
                .HasColumnName("fTagName");
        });

        modelBuilder.Entity<TAttractionTicket>(entity =>
        {
            entity.HasKey(e => e.FAttractionTicketId).HasName("PK__tAttract__7501AAD74D33E28F");

            entity.ToTable("tAttractionTickets");

            entity.Property(e => e.FAttractionTicketId).HasColumnName("fAttractionTicketId");
            entity.Property(e => e.FAttractionId).HasColumnName("fAttractionId");
            entity.Property(e => e.FCreatedDate)
                .HasColumnType("datetime")
                .HasColumnName("fCreatedDate");
            entity.Property(e => e.FDiscountInformation).HasColumnName("fDiscountInformation");
            entity.Property(e => e.FPrice)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("fPrice");
            entity.Property(e => e.FTicketType)
                .HasMaxLength(10)
                .HasColumnName("fTicketType");

            entity.HasOne(d => d.FAttraction).WithMany(p => p.TAttractionTickets)
                .HasForeignKey(d => d.FAttractionId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK__tAttracti__fAttr__09A971A2");
        });

        modelBuilder.Entity<TAttractionTicketOrder>(entity =>
        {
            entity.HasKey(e => e.FAttractionTicketOrderId);

            entity.ToTable("tAttractionTicketOrder");

            entity.Property(e => e.FAttractionTicketOrderId).HasColumnName("fAttractionTicketOrderId");
            entity.Property(e => e.FAttractionTicketId).HasColumnName("fAttractionTicketId");
            entity.Property(e => e.FBuyerId).HasColumnName("fBuyerId");
            entity.Property(e => e.FCreatedDate)
                .HasColumnType("datetime")
                .HasColumnName("fCreatedDate");
            entity.Property(e => e.FOrderQty).HasColumnName("fOrderQty");
            entity.Property(e => e.FUnitPrice)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("fUnitPrice");

            entity.HasOne(d => d.FAttractionTicket).WithMany(p => p.TAttractionTicketOrders)
                .HasForeignKey(d => d.FAttractionTicketId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tAttractionTicketOrder_tAttractionTickets");

            entity.HasOne(d => d.FBuyer).WithMany(p => p.TAttractionTicketOrders)
                .HasForeignKey(d => d.FBuyerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tAttractionTicketOrder_tUser");
        });

        modelBuilder.Entity<TAttractionUserFavorite>(entity =>
        {
            entity.HasKey(e => e.FFavoriteId).HasName("PK__tAttract__BAA20557F5C182D8");

            entity.ToTable("tAttractionUserFavorites");

            entity.Property(e => e.FFavoriteId).HasColumnName("fFavoriteId");
            entity.Property(e => e.FAttractionId).HasColumnName("fAttractionId");
            entity.Property(e => e.FCreatedDate)
                .HasColumnType("datetime")
                .HasColumnName("fCreatedDate");
            entity.Property(e => e.FUserId).HasColumnName("fUserId");

            entity.HasOne(d => d.FAttraction).WithMany(p => p.TAttractionUserFavorites)
                .HasForeignKey(d => d.FAttractionId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK__tAttracti__fAttr__0A9D95DB");

            entity.HasOne(d => d.FUser).WithMany(p => p.TAttractionUserFavorites)
                .HasForeignKey(d => d.FUserId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK__tAttracti__fUser__0B91BA14");
        });

        modelBuilder.Entity<TAttractionView>(entity =>
        {
            entity.HasKey(e => e.FId);

            entity.ToTable("tAttractionViews");

            entity.Property(e => e.FId).HasColumnName("fId");
            entity.Property(e => e.FAttractionId).HasColumnName("fAttractionId");
            entity.Property(e => e.FViewCount).HasColumnName("fViewCount");

            entity.HasOne(d => d.FAttraction).WithMany(p => p.TAttractionViews)
                .HasForeignKey(d => d.FAttractionId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_tAttractionViews_tAttractions");
        });

        modelBuilder.Entity<TAttractionViewLog>(entity =>
        {
            entity.HasKey(e => e.FLogId);

            entity.ToTable("tAttractionViewLogs");

            entity.Property(e => e.FLogId).HasColumnName("fLogId");
            entity.Property(e => e.FAttractionId).HasColumnName("fAttractionId");
            entity.Property(e => e.FUserIp)
                .HasMaxLength(50)
                .HasColumnName("fUserIp");
            entity.Property(e => e.FViewTime)
                .HasColumnType("datetime")
                .HasColumnName("fViewTime");

            entity.HasOne(d => d.FAttraction).WithMany(p => p.TAttractionViewLogs)
                .HasForeignKey(d => d.FAttractionId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_tAttractionViewLogs_tAttractions");
        });

        modelBuilder.Entity<TChat>(entity =>
        {
            entity.HasKey(e => e.FChatId).HasName("PK_tChats_1");

            entity.ToTable("tChats");

            entity.Property(e => e.FChatId).HasColumnName("fChatId");
            entity.Property(e => e.FMessageText).HasColumnName("fMessageText");
            entity.Property(e => e.FReceiverId).HasColumnName("fReceiverId");
            entity.Property(e => e.FSenderId).HasColumnName("fSenderId");
            entity.Property(e => e.FSentAt)
                .HasColumnType("datetime")
                .HasColumnName("fSentAt");

            entity.HasOne(d => d.FReceiver).WithMany(p => p.TChatFReceivers)
                .HasForeignKey(d => d.FReceiverId)
                .HasConstraintName("FK_tChats_tUser1");

            entity.HasOne(d => d.FSender).WithMany(p => p.TChatFSenders)
                .HasForeignKey(d => d.FSenderId)
                .HasConstraintName("FK_tChats_tUser");
        });

        modelBuilder.Entity<TChatRoom>(entity =>
        {
            entity.HasKey(e => e.FChatId);

            entity.ToTable("tChatRoom");

            entity.Property(e => e.FChatId).HasColumnName("fChatId");
            entity.Property(e => e.FChatStartTime)
                .HasColumnType("datetime")
                .HasColumnName("fChatStartTime");
            entity.Property(e => e.FUserId).HasColumnName("fUserId");

            entity.HasOne(d => d.FUser).WithMany(p => p.TChatRooms)
                .HasForeignKey(d => d.FUserId)
                .HasConstraintName("FK_tUser_TO_tChatRoom");
        });

        modelBuilder.Entity<TEvent>(entity =>
        {
            entity.HasKey(e => e.FEventId).HasName("PK_tEvents_1");

            entity.ToTable("tEvents");

            entity.Property(e => e.FEventId).HasColumnName("fEventId");
            entity.Property(e => e.FEventCreatedDate)
                .HasPrecision(0)
                .HasColumnName("fEventCreatedDate");
            entity.Property(e => e.FEventDescription)
                .HasMaxLength(200)
                .HasColumnName("fEventDescription");
            entity.Property(e => e.FEventEndDate)
                .HasPrecision(0)
                .HasColumnName("fEventEndDate");
            entity.Property(e => e.FEventIsActive).HasColumnName("fEventIsActive");
            entity.Property(e => e.FEventName)
                .HasMaxLength(20)
                .HasColumnName("fEventName");
            entity.Property(e => e.FEventStartDate)
                .HasPrecision(0)
                .HasColumnName("fEventStartDate");
            entity.Property(e => e.FEventUpdatedDate)
                .HasPrecision(0)
                .HasColumnName("fEventUpdatedDate");
            entity.Property(e => e.FEventUrl)
                .HasMaxLength(250)
                .HasColumnName("fEventURL");
            entity.Property(e => e.FUserId).HasColumnName("fUserId");
            entity.Property(e => e.FcurrentParticipants)
                .HasDefaultValue(0)
                .HasColumnName("FCurrentParticipants");
            entity.Property(e => e.FeventDuration).HasColumnName("FEventDuration");
            entity.Property(e => e.FeventFee)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("FEventFee");
            entity.Property(e => e.FmaxParticipants).HasColumnName("FMaxParticipants");
        });

        modelBuilder.Entity<TEventCategory>(entity =>
        {
            entity.HasKey(e => e.FEventCategoryId);

            entity.ToTable("tEventCategories");

            entity.Property(e => e.FEventCategoryId).HasColumnName("fEventCategoryId");
            entity.Property(e => e.FEventCategoryName)
                .HasMaxLength(50)
                .HasColumnName("fEventCategoryName");
            entity.Property(e => e.FEventCreatedDate)
                .HasPrecision(0)
                .HasColumnName("fEventCreatedDate");
            entity.Property(e => e.FEventDescriptionn)
                .HasMaxLength(100)
                .HasColumnName("fEventDescriptionn");
            entity.Property(e => e.FParentCategoryId).HasColumnName("fParentCategoryId");

            entity.HasOne(d => d.FParentCategory).WithMany(p => p.InverseFParentCategory)
                .HasForeignKey(d => d.FParentCategoryId)
                .HasConstraintName("FK_tEventCategories_tEventCategories");
        });

        modelBuilder.Entity<TEventCategoryMapping>(entity =>
        {
            entity.HasKey(e => e.FEventCategoryMappingId).HasName("PK_tEventCategoryMapping_1");

            entity.ToTable("tEventCategoryMapping");

            entity.Property(e => e.FEventCategoryMappingId).HasColumnName("fEventCategoryMappingId");
            entity.Property(e => e.FEventCategoryId).HasColumnName("fEventCategoryId");
            entity.Property(e => e.FEventId).HasColumnName("fEventId");

            entity.HasOne(d => d.FEventCategory).WithMany(p => p.TEventCategoryMappings)
                .HasForeignKey(d => d.FEventCategoryId)
                .HasConstraintName("FK_tEventCategoryMapping_tEventCategories");

            entity.HasOne(d => d.FEvent).WithMany(p => p.TEventCategoryMappings)
                .HasForeignKey(d => d.FEventId)
                .HasConstraintName("FK_tEventCategoryMapping_tEvents");
        });

        modelBuilder.Entity<TEventContact>(entity =>
        {
            entity.HasKey(e => e.FContactId);

            entity.ToTable("tEventContacts");

            entity.Property(e => e.FContactId).HasColumnName("fContactId");
            entity.Property(e => e.FContactEmail)
                .HasMaxLength(100)
                .HasColumnName("fContactEmail");
            entity.Property(e => e.FContactName)
                .HasMaxLength(100)
                .HasColumnName("fContactName");
            entity.Property(e => e.FContactPhone)
                .HasMaxLength(15)
                .HasColumnName("fContactPhone");
            entity.Property(e => e.FEventId).HasColumnName("fEventId");

            entity.HasOne(d => d.FEvent).WithMany(p => p.TEventContacts)
                .HasForeignKey(d => d.FEventId)
                .HasConstraintName("FK_tEventContacts_tEvents");
        });

        modelBuilder.Entity<TEventFavorite>(entity =>
        {
            entity.HasKey(e => e.FFavoriteId);

            entity.ToTable("tEventFavorites");

            entity.Property(e => e.FFavoriteId).HasColumnName("fFavoriteId");
            entity.Property(e => e.FCreatedDate)
                .HasPrecision(0)
                .HasColumnName("fCreatedDate");
            entity.Property(e => e.FEventId).HasColumnName("fEventId");
            entity.Property(e => e.FUserId).HasColumnName("fUserId");

            entity.HasOne(d => d.FEvent).WithMany(p => p.TEventFavorites)
                .HasForeignKey(d => d.FEventId)
                .HasConstraintName("FK_tEventFavorites_tEvents");

            entity.HasOne(d => d.FUser).WithMany(p => p.TEventFavorites)
                .HasForeignKey(d => d.FUserId)
                .HasConstraintName("FK_tEventFavorites_tUser");
        });

        modelBuilder.Entity<TEventImage>(entity =>
        {
            entity.HasKey(e => e.FEventImageId);

            entity.ToTable("tEventImage");

            entity.Property(e => e.FEventImageId).HasColumnName("fEventImageId");
            entity.Property(e => e.FEventId).HasColumnName("fEventId");
            entity.Property(e => e.FEventImage)
                .HasColumnType("image")
                .HasColumnName("fEventImage");
            entity.Property(e => e.FImageType)
                .HasMaxLength(50)
                .HasColumnName("fImageType");

            entity.HasOne(d => d.FEvent).WithMany(p => p.TEventImages)
                .HasForeignKey(d => d.FEventId)
                .HasConstraintName("FK_tEventImage_tEvents");
        });

        modelBuilder.Entity<TEventLocation>(entity =>
        {
            entity.HasKey(e => e.FLocationId);

            entity.ToTable("tEventLocations");

            entity.Property(e => e.FLocationId).HasColumnName("fLocationId");
            entity.Property(e => e.FAddress)
                .HasMaxLength(200)
                .HasColumnName("fAddress");
            entity.Property(e => e.FEventId).HasColumnName("fEventId");
            entity.Property(e => e.FLocationName)
                .HasMaxLength(100)
                .HasColumnName("fLocationName");

            entity.HasOne(d => d.FEvent).WithMany(p => p.TEventLocations)
                .HasForeignKey(d => d.FEventId)
                .HasConstraintName("FK_tEventLocations_tEvents");
        });

        modelBuilder.Entity<TEventLog>(entity =>
        {
            entity.HasKey(e => e.FLogId);

            entity.ToTable("tEventLogs");

            entity.Property(e => e.FLogId).HasColumnName("fLogId");
            entity.Property(e => e.FAction)
                .HasMaxLength(50)
                .HasColumnName("fAction");
            entity.Property(e => e.FActionDate)
                .HasPrecision(0)
                .HasColumnName("fActionDate");
            entity.Property(e => e.FDetails).HasColumnName("fDetails");
            entity.Property(e => e.FEventId).HasColumnName("fEventId");
            entity.Property(e => e.FUserId).HasColumnName("fUserId");

            entity.HasOne(d => d.FEvent).WithMany(p => p.TEventLogs)
                .HasForeignKey(d => d.FEventId)
                .HasConstraintName("FK_tEventLogs_tEvents");

            entity.HasOne(d => d.FUser).WithMany(p => p.TEventLogs)
                .HasForeignKey(d => d.FUserId)
                .HasConstraintName("FK_tEventLogs_tUser");
        });

        modelBuilder.Entity<TEventPayment>(entity =>
        {
            entity.HasKey(e => e.FPaymentId).HasName("PK_tPayments");

            entity.ToTable("tEventPayments");

            entity.Property(e => e.FPaymentId).HasColumnName("fPaymentId");
            entity.Property(e => e.FAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("fAmount");
            entity.Property(e => e.FPaymentDate)
                .HasPrecision(0)
                .HasColumnName("fPaymentDate");
            entity.Property(e => e.FPaymentMethod)
                .HasMaxLength(50)
                .HasColumnName("fPaymentMethod");
            entity.Property(e => e.FPaymentStatus)
                .HasMaxLength(50)
                .HasColumnName("fPaymentStatus");
            entity.Property(e => e.FRegistrationFormId).HasColumnName("fRegistrationFormId");

            entity.HasOne(d => d.FRegistrationForm).WithMany(p => p.TEventPayments)
                .HasForeignKey(d => d.FRegistrationFormId)
                .HasConstraintName("FK_tEventPayments_tEventRegistrationForm");
        });

        modelBuilder.Entity<TEventRegistrationForm>(entity =>
        {
            entity.HasKey(e => e.FEventRegistrationFormId);

            entity.ToTable("tEventRegistrationForm");

            entity.Property(e => e.FEventRegistrationFormId).HasColumnName("fEventRegistrationFormId");
            entity.Property(e => e.FEregistrationDate)
                .HasPrecision(0)
                .HasColumnName("fERegistrationDate");
            entity.Property(e => e.FEventId).HasColumnName("fEventId");
            entity.Property(e => e.FRegistrationStatus)
                .HasMaxLength(50)
                .HasColumnName("fRegistrationStatus");
            entity.Property(e => e.FUserId).HasColumnName("fUserId");

            entity.HasOne(d => d.FEvent).WithMany(p => p.TEventRegistrationForms)
                .HasForeignKey(d => d.FEventId)
                .HasConstraintName("FK_tEventRegistrationForm_tEvents");

            entity.HasOne(d => d.FUser).WithMany(p => p.TEventRegistrationForms)
                .HasForeignKey(d => d.FUserId)
                .HasConstraintName("FK_tEventRegistrationForm_tUser");
        });

        modelBuilder.Entity<TEventSchedule>(entity =>
        {
            entity.HasKey(e => e.FScheduleId);

            entity.ToTable("tEventSchedule");

            entity.Property(e => e.FScheduleId).HasColumnName("fScheduleId");
            entity.Property(e => e.FEndTime)
                .HasPrecision(0)
                .HasColumnName("fEndTime");
            entity.Property(e => e.FEventId).HasColumnName("fEventId");
            entity.Property(e => e.FScheduleNotes)
                .HasMaxLength(200)
                .HasColumnName("fScheduleNotes");
            entity.Property(e => e.FStartTime)
                .HasPrecision(0)
                .HasColumnName("fStartTime");

            entity.HasOne(d => d.FEvent).WithMany(p => p.TEventSchedules)
                .HasForeignKey(d => d.FEventId)
                .HasConstraintName("FK_tEventSchedule_tEvents");
        });

        modelBuilder.Entity<TFriend>(entity =>
        {
            entity.HasKey(e => e.FRelationshipId);

            entity.ToTable("tFriend");

            entity.Property(e => e.FRelationshipId).HasColumnName("fRelationshipId");
            entity.Property(e => e.FFriendId).HasColumnName("fFriendId");
            entity.Property(e => e.FUserId).HasColumnName("fUserId");

            entity.HasOne(d => d.FFriend).WithMany(p => p.TFriendFFriends)
                .HasForeignKey(d => d.FFriendId)
                .HasConstraintName("FK_tFriend_tUser1");

            entity.HasOne(d => d.FUser).WithMany(p => p.TFriendFUsers)
                .HasForeignKey(d => d.FUserId)
                .HasConstraintName("FK_tFriend_tUser");
        });

        modelBuilder.Entity<TMessage>(entity =>
        {
            entity.HasKey(e => e.FMessageId);

            entity.ToTable("tMessages");

            entity.Property(e => e.FMessageId).HasColumnName("fMessageId");
            entity.Property(e => e.FChatId).HasColumnName("fChatId");
            entity.Property(e => e.FMessageText).HasColumnName("fMessageText");
            entity.Property(e => e.FUserId).HasColumnName("fUserId");
            entity.Property(e => e.Ftimestamp)
                .HasColumnType("datetime")
                .HasColumnName("ftimestamp");

            entity.HasOne(d => d.FChat).WithMany(p => p.TMessages)
                .HasForeignKey(d => d.FChatId)
                .HasConstraintName("FK_tChatRoom_TO_tMessages");

            entity.HasOne(d => d.FUser).WithMany(p => p.TMessages)
                .HasForeignKey(d => d.FUserId)
                .HasConstraintName("FK_tUser_TO_tMessages");
        });

        modelBuilder.Entity<TOrder>(entity =>
        {
            entity.HasKey(e => e.FOrderId);

            entity.ToTable("tOrders");

            entity.Property(e => e.FOrderId).HasColumnName("fOrderId");
            entity.Property(e => e.FBuyerId).HasColumnName("fBuyerId");
            entity.Property(e => e.FExtraInfo).HasColumnName("fExtraInfo");
            entity.Property(e => e.FOrderDate)
                .HasColumnType("datetime")
                .HasColumnName("fOrderDate");
            entity.Property(e => e.FOrderStatusId).HasColumnName("fOrderStatusId");
            entity.Property(e => e.FPaymentMethod)
                .HasMaxLength(50)
                .HasColumnName("fPaymentMethod");
            entity.Property(e => e.FShipAddress)
                .HasMaxLength(100)
                .HasColumnName("fShipAddress");

            entity.HasOne(d => d.FBuyer).WithMany(p => p.TOrders)
                .HasForeignKey(d => d.FBuyerId)
                .HasConstraintName("FK_tOrders_tUser");

            entity.HasOne(d => d.FOrderStatus).WithMany(p => p.TOrders)
                .HasForeignKey(d => d.FOrderStatusId)
                .HasConstraintName("FK_tOrders_tOrderStatus");
        });

        modelBuilder.Entity<TOrderStatus>(entity =>
        {
            entity.HasKey(e => e.FOrderStatusId);

            entity.ToTable("tOrderStatus");

            entity.Property(e => e.FOrderStatusId).HasColumnName("fOrderStatusId");
            entity.Property(e => e.FStatusName)
                .HasMaxLength(50)
                .HasColumnName("fStatusName");
        });

        modelBuilder.Entity<TOrderStatusHistory>(entity =>
        {
            entity.HasKey(e => e.FStatusHistoryId);

            entity.ToTable("tOrderStatusHistory");

            entity.Property(e => e.FStatusHistoryId).HasColumnName("fStatusHistoryId");
            entity.Property(e => e.FOrderId).HasColumnName("fOrderId");
            entity.Property(e => e.FOrderStatusId).HasColumnName("fOrderStatusId");
            entity.Property(e => e.FStatusName)
                .HasMaxLength(50)
                .HasColumnName("fStatusName");
            entity.Property(e => e.FTimestamp)
                .HasColumnType("datetime")
                .HasColumnName("fTimestamp");

            entity.HasOne(d => d.FOrder).WithMany(p => p.TOrderStatusHistories)
                .HasForeignKey(d => d.FOrderId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tOrderStatusHistory_tOrders");

            entity.HasOne(d => d.FOrderStatus).WithMany(p => p.TOrderStatusHistories)
                .HasForeignKey(d => d.FOrderStatusId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tOrderStatusHistory_tOrderStatus");
        });

        modelBuilder.Entity<TOrdersDetail>(entity =>
        {
            entity.HasKey(e => e.FOrderDetailsId);

            entity.ToTable("tOrdersDetails");

            entity.Property(e => e.FOrderDetailsId).HasColumnName("fOrderDetailsId");
            entity.Property(e => e.FExtraInfo).HasColumnName("fExtraInfo");
            entity.Property(e => e.FItemId).HasColumnName("fItemId");
            entity.Property(e => e.FItemType)
                .HasMaxLength(50)
                .HasColumnName("fItemType");
            entity.Property(e => e.FOrderId).HasColumnName("fOrderId");
            entity.Property(e => e.FOrderQty).HasColumnName("fOrderQty");
            entity.Property(e => e.FUnitPrice)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("fUnitPrice");

            entity.HasOne(d => d.FOrder).WithMany(p => p.TOrdersDetails)
                .HasForeignKey(d => d.FOrderId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_tOrdersDetails_tOrders");
        });

        modelBuilder.Entity<TPost>(entity =>
        {
            entity.HasKey(e => e.FPostId);

            entity.ToTable("tPosts");

            entity.Property(e => e.FPostId).HasColumnName("fPostId");
            entity.Property(e => e.FCategoryId).HasColumnName("fCategoryId");
            entity.Property(e => e.FContent).HasColumnName("fContent");
            entity.Property(e => e.FCreatedAt)
                .HasColumnType("datetime")
                .HasColumnName("fCreatedAt");
            entity.Property(e => e.FIsPublic).HasColumnName("fIsPublic");
            entity.Property(e => e.FTitle)
                .HasMaxLength(20)
                .HasColumnName("fTitle");
            entity.Property(e => e.FUpdatedAt)
                .HasColumnType("datetime")
                .HasColumnName("fUpdatedAt");
            entity.Property(e => e.FUserId).HasColumnName("fUserId");

            entity.HasOne(d => d.FCategory).WithMany(p => p.TPosts)
                .HasForeignKey(d => d.FCategoryId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_tPostCategories_TO_tPosts");

            entity.HasOne(d => d.FUser).WithMany(p => p.TPosts)
                .HasForeignKey(d => d.FUserId)
                .HasConstraintName("FK_tUser_TO_tPosts");
        });

        modelBuilder.Entity<TPostAndTag>(entity =>
        {
            entity.HasKey(e => e.FPostTagId);

            entity.ToTable("tPostAndTag");

            entity.Property(e => e.FPostTagId).HasColumnName("fPostTagId");
            entity.Property(e => e.FPostId).HasColumnName("fPostId");
            entity.Property(e => e.FTagId).HasColumnName("fTagId");

            entity.HasOne(d => d.FPost).WithMany(p => p.TPostAndTags)
                .HasForeignKey(d => d.FPostId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_tPosts_TO_tPostAndTag");

            entity.HasOne(d => d.FTag).WithMany(p => p.TPostAndTags)
                .HasForeignKey(d => d.FTagId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_tPostAndTag_tPostTags");
        });

        modelBuilder.Entity<TPostCategory>(entity =>
        {
            entity.HasKey(e => e.FCategoryId);

            entity.ToTable("tPostCategories");

            entity.Property(e => e.FCategoryId).HasColumnName("fCategoryId");
            entity.Property(e => e.FName)
                .HasMaxLength(20)
                .HasColumnName("fName");
            entity.Property(e => e.FUserId).HasColumnName("fUserId");

            entity.HasOne(d => d.FUser).WithMany(p => p.TPostCategories)
                .HasForeignKey(d => d.FUserId)
                .HasConstraintName("FK_tPostCategories_tUser");
        });

        modelBuilder.Entity<TPostComment>(entity =>
        {
            entity.HasKey(e => e.FCommentId);

            entity.ToTable("tPostComments");

            entity.Property(e => e.FCommentId).HasColumnName("fCommentId");
            entity.Property(e => e.FContent).HasColumnName("fContent");
            entity.Property(e => e.FCreatedAt)
                .HasColumnType("datetime")
                .HasColumnName("fCreatedAt");
            entity.Property(e => e.FParentCommentId).HasColumnName("fParentCommentId");
            entity.Property(e => e.FPostId).HasColumnName("fPostId");
            entity.Property(e => e.FUpdatedAt)
                .HasColumnType("datetime")
                .HasColumnName("fUpdatedAt");
            entity.Property(e => e.FUserId).HasColumnName("fUserId");

            entity.HasOne(d => d.FParentComment).WithMany(p => p.InverseFParentComment)
                .HasForeignKey(d => d.FParentCommentId)
                .HasConstraintName("FK_tPostComments_tPostComments");

            entity.HasOne(d => d.FPost).WithMany(p => p.TPostComments)
                .HasForeignKey(d => d.FPostId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_tPosts_TO_tPostComments");

            entity.HasOne(d => d.FUser).WithMany(p => p.TPostComments)
                .HasForeignKey(d => d.FUserId)
                .HasConstraintName("FK_tPostComments_tUser");
        });

        modelBuilder.Entity<TPostImage>(entity =>
        {
            entity.HasKey(e => e.FImageId);

            entity.ToTable("tPostImages");

            entity.Property(e => e.FImageId).HasColumnName("fImageId");
            entity.Property(e => e.FImage)
                .HasColumnType("image")
                .HasColumnName("fImage");
            entity.Property(e => e.FPostId).HasColumnName("fPostId");

            entity.HasOne(d => d.FPost).WithMany(p => p.TPostImages)
                .HasForeignKey(d => d.FPostId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_tPosts_TO_tPostImages");
        });

        modelBuilder.Entity<TPostLike>(entity =>
        {
            entity.HasKey(e => e.FLikeId);

            entity.ToTable("tPostLikes");

            entity.Property(e => e.FLikeId).HasColumnName("fLikeId");
            entity.Property(e => e.FPostId).HasColumnName("fPostId");
            entity.Property(e => e.FUserId).HasColumnName("fUserId");

            entity.HasOne(d => d.FPost).WithMany(p => p.TPostLikes)
                .HasForeignKey(d => d.FPostId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_tPostLikes_tPosts");

            entity.HasOne(d => d.FUser).WithMany(p => p.TPostLikes)
                .HasForeignKey(d => d.FUserId)
                .HasConstraintName("FK_tPostLikes_tUser");
        });

        modelBuilder.Entity<TPostTag>(entity =>
        {
            entity.HasKey(e => e.FTagId);

            entity.ToTable("tPostTags");

            entity.Property(e => e.FTagId).HasColumnName("fTagId");
            entity.Property(e => e.FTagName)
                .HasMaxLength(50)
                .HasColumnName("fTagName");
        });

        modelBuilder.Entity<TProduct>(entity =>
        {
            entity.HasKey(e => e.FProductId);

            entity.ToTable("tProduct");

            entity.Property(e => e.FProductId).HasColumnName("fProductId");
            entity.Property(e => e.FIsOnSales).HasColumnName("fIsOnSales");
            entity.Property(e => e.FProductCategoryId).HasColumnName("fProductCategoryId");
            entity.Property(e => e.FProductDateAdd)
                .HasColumnType("datetime")
                .HasColumnName("fProductDateAdd");
            entity.Property(e => e.FProductDescription)
                .HasMaxLength(200)
                .HasColumnName("fProductDescription");
            entity.Property(e => e.FProductName)
                .HasMaxLength(50)
                .HasColumnName("fProductName");
            entity.Property(e => e.FProductPrice)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("fProductPrice");
            entity.Property(e => e.FProductUpdated)
                .HasColumnType("datetime")
                .HasColumnName("fProductUpdated");
            entity.Property(e => e.FStock).HasColumnName("fStock");
            entity.Property(e => e.FUserId).HasColumnName("fUserId");

            entity.HasOne(d => d.FProductCategory).WithMany(p => p.TProducts)
                .HasForeignKey(d => d.FProductCategoryId)
                .HasConstraintName("FK_tProduct_tProductCategories");

            entity.HasOne(d => d.FUser).WithMany(p => p.TProducts)
                .HasForeignKey(d => d.FUserId)
                .HasConstraintName("FK_tProduct_tUser");
        });

        modelBuilder.Entity<TProductCategory>(entity =>
        {
            entity.HasKey(e => e.FProductCategoryId);

            entity.ToTable("tProductCategories");

            entity.Property(e => e.FProductCategoryId).HasColumnName("fProductCategoryId");
            entity.Property(e => e.FCategoryName)
                .HasMaxLength(50)
                .HasColumnName("fCategoryName");
        });

        modelBuilder.Entity<TProductImage>(entity =>
        {
            entity.HasKey(e => e.FProductImageId);

            entity.ToTable("tProductImage");

            entity.Property(e => e.FProductImageId).HasColumnName("fProductImageId");
            entity.Property(e => e.FImage)
                .HasColumnType("image")
                .HasColumnName("fImage");
            entity.Property(e => e.FProductId).HasColumnName("fProductId");

            entity.HasOne(d => d.FProduct).WithMany(p => p.TProductImages)
                .HasForeignKey(d => d.FProductId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_tProductImage_tProduct");
        });

        modelBuilder.Entity<TProductReview>(entity =>
        {
            entity.HasKey(e => e.FReviewId);

            entity.ToTable("tProductReviews");

            entity.Property(e => e.FReviewId).HasColumnName("fReviewId");
            entity.Property(e => e.FOrderDetailsId).HasColumnName("fOrderDetailsId");
            entity.Property(e => e.FReviewComment)
                .HasMaxLength(200)
                .HasColumnName("fReviewComment");
            entity.Property(e => e.FReviewDate)
                .HasColumnType("datetime")
                .HasColumnName("fReviewDate");
            entity.Property(e => e.FReviewRating).HasColumnName("fReviewRating");
            entity.Property(e => e.FUserId).HasColumnName("fUserId");

            entity.HasOne(d => d.FOrderDetails).WithMany(p => p.TProductReviews)
                .HasForeignKey(d => d.FOrderDetailsId)
                .HasConstraintName("FK_tProductReviews_tOrdersDetails");

            entity.HasOne(d => d.FUser).WithMany(p => p.TProductReviews)
                .HasForeignKey(d => d.FUserId)
                .HasConstraintName("FK_tProductReviews_tUser");
        });

        modelBuilder.Entity<TRank>(entity =>
        {
            entity.HasKey(e => e.FUserRankId);

            entity.ToTable("tRank");

            entity.Property(e => e.FUserRankId).HasColumnName("fUserRankId");
            entity.Property(e => e.FRankName)
                .HasMaxLength(20)
                .HasColumnName("fRankName");
        });

        modelBuilder.Entity<TShoppingCart>(entity =>
        {
            entity.HasKey(e => e.FCartId);

            entity.ToTable("tShoppingCart");

            entity.Property(e => e.FCartId).HasColumnName("fCartId");
            entity.Property(e => e.FCreatedDate)
                .HasPrecision(0)
                .HasColumnName("fCreatedDate");
            entity.Property(e => e.FUserId).HasColumnName("fUserId");

            entity.HasOne(d => d.FUser).WithMany(p => p.TShoppingCarts)
                .HasForeignKey(d => d.FUserId)
                .HasConstraintName("FK_tShoppingCart_tUser");
        });

        modelBuilder.Entity<TShoppingCartItem>(entity =>
        {
            entity.HasKey(e => e.FCartItemId);

            entity.ToTable("tShoppingCartItems");

            entity.Property(e => e.FCartItemId).HasColumnName("fCartItemId");
            entity.Property(e => e.FCartId).HasColumnName("fCartId");
            entity.Property(e => e.FItemId).HasColumnName("fItemId");
            entity.Property(e => e.FItemType)
                .HasMaxLength(50)
                .HasColumnName("fItemType");
            entity.Property(e => e.FPrice)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("fPrice");
            entity.Property(e => e.FQuantity).HasColumnName("fQuantity");

            entity.HasOne(d => d.FCart).WithMany(p => p.TShoppingCartItems)
                .HasForeignKey(d => d.FCartId)
                .HasConstraintName("FK_tShoppingCartItems_tShoppingCart");
        });

        modelBuilder.Entity<TUser>(entity =>
        {
            entity.HasKey(e => e.FUserId);

            entity.ToTable("tUser");

            entity.Property(e => e.FUserId).HasColumnName("fUserId");
            entity.Property(e => e.FUserAddress)
                .HasMaxLength(50)
                .HasColumnName("fUserAddress");
            entity.Property(e => e.FUserBirthday)
                .HasColumnType("datetime")
                .HasColumnName("fUserBirthday");
            entity.Property(e => e.FUserComeDate)
                .HasColumnType("datetime")
                .HasColumnName("fUserComeDate");
            entity.Property(e => e.FUserEmail)
                .HasMaxLength(50)
                .HasColumnName("fUserEmail");
            entity.Property(e => e.FUserImage)
                .HasColumnType("image")
                .HasColumnName("fUserImage");
            entity.Property(e => e.FUserName)
                .HasMaxLength(20)
                .HasColumnName("fUserName");
            entity.Property(e => e.FUserNickName)
                .HasMaxLength(20)
                .HasColumnName("fUserNickName");
            entity.Property(e => e.FUserNotify).HasColumnName("fUserNotify");
            entity.Property(e => e.FUserOnLine).HasColumnName("fUserOnLine");
            entity.Property(e => e.FUserPassword).HasColumnName("fUserPassword");
            entity.Property(e => e.FUserPhone)
                .HasMaxLength(20)
                .HasColumnName("fUserPhone");
            entity.Property(e => e.FUserRankId).HasColumnName("fUserRankId");
            entity.Property(e => e.FUserSex)
                .HasMaxLength(10)
                .HasColumnName("fUserSex");

            entity.HasOne(d => d.FUserRank).WithMany(p => p.TUsers)
                .HasForeignKey(d => d.FUserRankId)
                .HasConstraintName("FK_tRank_TO_tUser");
        });

        modelBuilder.Entity<TWallet>(entity =>
        {
            entity.HasKey(e => e.FTradeId);

            entity.ToTable("tWallet");

            entity.Property(e => e.FTradeId).HasColumnName("fTradeId");
            entity.Property(e => e.FAmountChange).HasColumnName("fAmountChange");
            entity.Property(e => e.FChangeLog)
                .HasMaxLength(200)
                .HasColumnName("fChangeLog");
            entity.Property(e => e.FChangeTime)
                .HasColumnType("datetime")
                .HasColumnName("fChangeTime");
            entity.Property(e => e.FUserId).HasColumnName("fUserId");

            entity.HasOne(d => d.FUser).WithMany(p => p.TWallets)
                .HasForeignKey(d => d.FUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tWallet_tUser");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}